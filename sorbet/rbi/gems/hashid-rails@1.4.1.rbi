# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `hashid-rails` gem.
# Please instead update this file by running `bin/tapioca gem hashid-rails`.


# source://hashid-rails//lib/hashid/rails/version.rb#3
module Hashid; end

# source://hashid-rails//lib/hashid/rails/version.rb#4
module Hashid::Rails
  mixes_in_class_methods ::Hashid::Rails::ClassMethods

  # source://hashid-rails//lib/hashid/rails.rb#33
  def hashid; end

  # source://hashid-rails//lib/hashid/rails.rb#37
  def to_param; end

  class << self
    # Get configuration or load defaults
    #
    # source://hashid-rails//lib/hashid/rails.rb#19
    def configuration; end

    # Set configuration settings with a block
    #
    # @yield [configuration]
    #
    # source://hashid-rails//lib/hashid/rails.rb#24
    def configure; end

    # @private
    #
    # source://hashid-rails//lib/hashid/rails.rb#14
    def included(base); end

    # Reset gem configuration to defaults
    #
    # source://hashid-rails//lib/hashid/rails.rb#29
    def reset; end
  end
end

# source://hashid-rails//lib/hashid/rails.rb#41
module Hashid::Rails::ClassMethods
  # @param ids [String, Integer, Array<Integer, String>] id(s) to decode.
  # @param fallback [Boolean] indicates whether to return the passed in
  #   id(s) if unable to decode or if already decoded.
  #
  # source://hashid-rails//lib/hashid/rails.rb#80
  def decode_id(ids, fallback: T.unsafe(nil)); end

  # source://hashid-rails//lib/hashid/rails.rb#69
  def encode_id(ids); end

  # source://hashid-rails//lib/hashid/rails.rb#88
  def find(*ids); end

  # source://hashid-rails//lib/hashid/rails.rb#101
  def find_by_hashid(hashid); end

  # source://hashid-rails//lib/hashid/rails.rb#105
  def find_by_hashid!(hashid); end

  # source://hashid-rails//lib/hashid/rails.rb#63
  def has_many(*args, &block); end

  # source://hashid-rails//lib/hashid/rails.rb#42
  def hashid_config(options = T.unsafe(nil)); end

  # source://hashid-rails//lib/hashid/rails.rb#51
  def hashid_configuration; end

  # source://hashid-rails//lib/hashid/rails.rb#59
  def relation; end

  # source://hashid-rails//lib/hashid/rails.rb#55
  def reset_hashid_config; end

  private

  # source://hashid-rails//lib/hashid/rails.rb#125
  def hashid_decode(id, fallback:); end

  # source://hashid-rails//lib/hashid/rails.rb#115
  def hashid_encode(id); end

  # source://hashid-rails//lib/hashid/rails.rb#111
  def hashids; end

  # @return [Boolean]
  #
  # source://hashid-rails//lib/hashid/rails.rb#138
  def valid_hashid?(decoded_hashid); end
end

# source://hashid-rails//lib/hashid/rails/configuration.rb#5
class Hashid::Rails::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://hashid-rails//lib/hashid/rails/configuration.rb#14
  def initialize; end

  # Returns the value of attribute alphabet.
  #
  # source://hashid-rails//lib/hashid/rails/configuration.rb#6
  def alphabet; end

  # Sets the attribute alphabet
  #
  # @param value the value to set the attribute alphabet to.
  #
  # source://hashid-rails//lib/hashid/rails/configuration.rb#6
  def alphabet=(_arg0); end

  # Returns the value of attribute min_hash_length.
  #
  # source://hashid-rails//lib/hashid/rails/configuration.rb#6
  def min_hash_length; end

  # Sets the attribute min_hash_length
  #
  # @param value the value to set the attribute min_hash_length to.
  #
  # source://hashid-rails//lib/hashid/rails/configuration.rb#6
  def min_hash_length=(_arg0); end

  # Returns the value of attribute override_find.
  #
  # source://hashid-rails//lib/hashid/rails/configuration.rb#6
  def override_find; end

  # Sets the attribute override_find
  #
  # @param value the value to set the attribute override_find to.
  #
  # source://hashid-rails//lib/hashid/rails/configuration.rb#6
  def override_find=(_arg0); end

  # Returns the value of attribute override_to_param.
  #
  # source://hashid-rails//lib/hashid/rails/configuration.rb#6
  def override_to_param; end

  # Sets the attribute override_to_param
  #
  # @param value the value to set the attribute override_to_param to.
  #
  # source://hashid-rails//lib/hashid/rails/configuration.rb#6
  def override_to_param=(_arg0); end

  # Returns the value of attribute pepper.
  #
  # source://hashid-rails//lib/hashid/rails/configuration.rb#6
  def pepper; end

  # Sets the attribute pepper
  #
  # @param value the value to set the attribute pepper to.
  #
  # source://hashid-rails//lib/hashid/rails/configuration.rb#6
  def pepper=(_arg0); end

  # Returns the value of attribute salt.
  #
  # source://hashid-rails//lib/hashid/rails/configuration.rb#6
  def salt; end

  # Sets the attribute salt
  #
  # @param value the value to set the attribute salt to.
  #
  # source://hashid-rails//lib/hashid/rails/configuration.rb#6
  def salt=(_arg0); end

  # Returns the value of attribute sign_hashids.
  #
  # source://hashid-rails//lib/hashid/rails/configuration.rb#6
  def sign_hashids; end

  # Sets the attribute sign_hashids
  #
  # @param value the value to set the attribute sign_hashids to.
  #
  # source://hashid-rails//lib/hashid/rails/configuration.rb#6
  def sign_hashids=(_arg0); end

  # source://hashid-rails//lib/hashid/rails/configuration.rb#26
  def to_args; end
end

# Arbitrary value to verify hashid
# https://en.wikipedia.org/wiki/Phrases_from_The_Hitchhiker%27s_Guide_to_the_Galaxy#On_the_Internet_and_in_software
#
# source://hashid-rails//lib/hashid/rails.rb#12
Hashid::Rails::HASHID_TOKEN = T.let(T.unsafe(nil), Integer)

# source://hashid-rails//lib/hashid/rails/version.rb#5
Hashid::Rails::VERSION = T.let(T.unsafe(nil), String)
